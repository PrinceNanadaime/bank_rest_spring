package com.example.bank.controller;

import com.example.bank.model.entities.ClientStatus;
import com.example.bank.model.entities.Gender;
import com.example.bank.model.entities.NaturalPerson;
import com.example.bank.model.repos.GenderRepository;
import com.example.bank.model.repos.NaturalPersonRepository;
import com.example.bank.service.NaturalPersonService;
import com.github.fge.jsonpatch.JsonPatch;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController // This means that this class is a Controller
public class NaturalPersonController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private NaturalPersonService naturalPersonService;

    @PostMapping(value = "/person")
    public ResponseEntity<?> create(@RequestBody NaturalPerson naturalPerson) {
        naturalPersonService.create(naturalPerson);
        return new ResponseEntity<>(HttpStatus.CREATED);
    }

    @GetMapping(value = "/person")
    public ResponseEntity<List<NaturalPerson>> read() {

        List<NaturalPerson> naturalPeople = naturalPersonService.readAll();
        return naturalPeople != null &&  !naturalPeople.isEmpty()
                ? new ResponseEntity<>(naturalPeople, HttpStatus.OK)
                : new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }

    @GetMapping(value = "/person/{id}")
    public ResponseEntity<NaturalPerson> read(@PathVariable(name = "id") long id) {
        try {
            NaturalPerson naturalPerson = naturalPersonService.readById(id);
            return new ResponseEntity<>(naturalPerson, HttpStatus.OK);
        }
        catch (EntityNotFoundException e){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }

    @PatchMapping(path = "/person/{id}", consumes = "application/json-patch+json")
    public ResponseEntity<NaturalPerson> patch(@PathVariable Long id, @RequestBody JsonPatch patch) {
        try {
            NaturalPerson naturalPersonPatched = naturalPersonService.patch(id, patch);
            return ResponseEntity.ok(naturalPersonPatched);
        } catch (EntityNotFoundException e) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
    }

    @PutMapping(value = "/person")
    public ResponseEntity<?> put(@RequestParam Optional<Long> id, @RequestBody NaturalPerson naturalPerson) {
        boolean updated = id.filter(aLong -> naturalPersonService.update(naturalPerson, aLong)).isPresent();
        return updated ? new ResponseEntity<>(HttpStatus.OK) : create(naturalPerson);
    }

    @DeleteMapping(value = "/person/{id}")
    public ResponseEntity<?> delete(@PathVariable(name = "id") long id) {
        try {
            naturalPersonService.delete(id);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (EntityNotFoundException e){
            return new ResponseEntity<>(HttpStatus.NOT_MODIFIED);
        }
    }



    /*
    @PostMapping(path="/add") // Map ONLY POST Requests
    public @ResponseBody String addNewNaturalPerson (@RequestParam String name,
                                                     @RequestParam String surname,
                                                     @RequestParam String patronymic,
                                                     @RequestParam String  address,
                                                     @RequestParam String phoneNumber,
                                                     @RequestParam long sexId,
                                                     @RequestParam ClientStatus status) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        NaturalPerson np = new NaturalPerson();
        np.setName(name);
        np.setSurname(surname);
        np.setPatronymic(patronymic);
        np.setAddress(address);
        np.setPhoneNumber(phoneNumber);
        //np.setSex(genderRepository.findById(sexId));
        np.setStatus(status);

        return "Saved";

        // TODO довести до ума эндпойтны для создания таблиц
    } */

}
